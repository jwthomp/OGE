uniform vec4 light_position;
uniform vec4 light_ambient;
uniform vec4 light_diffuse;
uniform vec4 light_specular;
uniform vec3 light_attenuation;

uniform sampler2D color_texture;
uniform sampler2D normal_texture;
uniform sampler2D depth_texture;
//uniform sampler2D posxy_texture;
uniform sampler2D shadow_texture;

uniform vec3 camera_position;
uniform vec3 camera_direction;

uniform mat4 view_matrix;
uniform mat4 view_matrix_inverse;
uniform mat4 proj_matrix_inverse;

uniform mat3 world_to_shadow;
uniform vec3 sphere_origin;

varying vec4 position;

uniform vec3 spot_direction;
uniform float spot_exponent;
uniform float spot_cos_cutoff;

uniform vec3 view_vectors[4];
uniform vec2 planes;

inline float DecodeFloatRG8( vec2 rg ) {
  return dot( rg, vec2(1.0, 1.0/256.0) );
}

inline float DecodeFloatRGB8( vec3 rgb ) {
  return dot( rgb, vec3(1.0, 1.0/256.0, 1.0/(256.0 * 256.0)) );
}

inline float DecodeFloatR8( float r ) {
	return r;
}

//	vec3 L = -normalize(light_position.xyz - pixel_position.xyz);
//	diffuse = vec4(0.0);
//	specular = vec4(0.0);
//	albedo = vec4(1.0);
//	vec3 V = normalize(-pixel_position.xyz);
//	vec3 HV = normalize((V + L) / 2.0);
//	float NdotL = max(dot(normal3, L), 0.0);
//	float NdotHV = max(0.0, dot(normal3, HV));
//	if (NdotL > 0.0) {
//		diffuse = NdotL * light_diffuse;
//		specular = light_specular * pow(NdotHV, 1.0);
//	}
	

void light(	in vec3 p_pixel_position,
					in vec3 p_light_position, 
					in vec3 p_normal,
					in vec3 p_eye_position,
					in vec3 p_spot_direction,
					inout vec4 p_diffuse,
					inout vec4 p_specular)
{
	vec3 N = normalize(p_normal);
	vec3 L = -normalize(p_light_position - p_pixel_position);
	vec3 V = -normalize(p_pixel_position);
	vec3 HV = normalize((V + L) / 2.0);
	float distance = length(p_light_position - p_pixel_position);
	
	float NdotL = max(0.0, dot(N, L));
	float NdotHV = max(0.0, dot(N, HV));
	

	float power_factor;
	float spot_effect;
	if (NdotL > 0.0) {
		power_factor = pow(NdotHV, 1.0);
		spot_effect = 1.0;
	} else {
		power_factor = 0.0;
		spot_effect = 0.0;
		NdotL = 0.0;
	}
	
	//float attenuation = spot_effect / (light_attenuation.x + (light_attenuation.y * distance) + (light_attenuation.z * distance * distance));
		
	float attenuation = 1.0;
		
	p_diffuse += light_diffuse * attenuation * NdotL;
	p_specular += light_specular * attenuation  * power_factor;
}

void main()
{			
	vec2 tex_coord = gl_TexCoord[0].st;	
	vec4 depth4 = texture2D(depth_texture, tex_coord);						
	float depth = DecodeFloatRGB8(depth4.xyz);
	
	if (depth == 0.0) {
		discard;
	}
	
	vec4 pos_proj = vec4((tex_coord.s * 2.0) - 1.0, (tex_coord.t * 2.0) - 1.0, depth, 1.0);
	vec4 inv = proj_matrix_inverse * pos_proj;
	//vec4 inv = view_matrix * pos_proj;
	
	// Convert position into eye space
	vec3 position = inv.xyz / inv.w;
	
	vec3 pixel_position;
	if (light_position.w == 0.0) {
		pixel_position = vec3(0.0);
	} else {
		pixel_position = position;
	}

	vec3 eye = vec3(0.0);
	
	
	vec4 albedo = texture2D(color_texture, tex_coord);
	vec4 n = texture2D(normal_texture, tex_coord);

	vec3 normal3 = vec3((DecodeFloatR8(n.x) - 0.5) * 2.0, 
						(DecodeFloatR8(n.y) - 0.5) * 2.0, 
						(DecodeFloatR8(n.z) - 0.5) * 2.0);

	vec4 diffuse = vec4(0.0);
	vec4 specular = vec4(0.0);
	light(pixel_position, light_position.xyz, normal3, eye, eye, diffuse, specular);
	specular = vec4(0.0);
	
	// Apply light	
	gl_FragData[0] = albedo * (diffuse + specular + light_ambient);

}
