uniform vec4 light_position;
uniform vec4 light_ambient;
uniform vec4 light_diffuse;
uniform vec4 light_specular;
uniform vec3 light_attenuation;
uniform float light_specular_power;

uniform sampler2D color_texture;
uniform sampler2D normal_texture;
uniform sampler2D depth_texture;
uniform sampler2D posxy_texture;
//uniform sampler2D shadow_texture;

uniform vec3 camera_position;
uniform vec3 camera_direction;

//uniform mat4 view_matrix;
//uniform mat4 view_matrix_inverse;
uniform mat4 proj_matrix_inverse;

//uniform mat3 world_to_shadow;
//uniform vec3 sphere_origin;

//varying vec4 position;

uniform vec3 spot_direction;
uniform float spot_exponent;
uniform float spot_cos_cutoff;
const float cos_outer_cone_angle = 0.8;

//uniform vec3 view_vectors[4];
//uniform vec2 planes;

const float val = 255.0;

inline float DecodeFloatRG8( vec2 rg ) {
	return dot( rg, vec2(1.0, 1.0/val) );
}

inline float DecodeFloatRGB8( vec3 rgb ) {
  return dot( rgb, vec3(1.0, 1.0/val, 1.0/(val * val)) );
}

inline float DecodeFloatR8( float r ) {
	return r;
}

void light(	in vec3 p_pixel_position,
					in vec3 p_light_position, 
					in vec3 p_normal,
					in vec3 p_eye_position,
					in vec3 p_spot_direction,
					inout vec4 p_diffuse,
					inout vec4 p_specular)
{
	vec3 L = -normalize(p_light_position - p_pixel_position);
	vec3 D = normalize(p_spot_direction);
	

	float cos_outer_cone_angle = 1.0;
	float cos_cur_angle = dot(D, -L);
	float cos_inner_minus_outer_angle = cos_outer_cone_angle - spot_cos_cutoff;
	float spot_factor = 0.0;
	spot_factor = clamp((cos_cur_angle - spot_cos_cutoff) / 
       cos_inner_minus_outer_angle, 0.0, 1.0);
	
	vec3 N = normalize(p_normal);
	float NdotL = max(0.0, dot(N, L));

	if (NdotL > 0.0) {	
		float dist = length(p_light_position - p_pixel_position);
		float att = spot_factor / (light_attenuation.x +
					light_attenuation.y * dist +
					light_attenuation.z * dist * dist);

		p_diffuse += light_diffuse * NdotL * att;
		
		vec3 V = -normalize(p_pixel_position);
		vec3 H = normalize(L + V);
		float NdotH = max(0.0, dot(N, H));

		p_specular += light_specular * att; // * pow(NdotH, light_specular_power);
	}
}

void main()
{			


	vec2 tex_coord = gl_TexCoord[0].st;	
	vec4 depth4 = texture2D(depth_texture, tex_coord);						
	float depth = DecodeFloatRGB8(depth4.xyz);
	
	if (depth == 0.0) {
		discard;
	}
	
	vec4 pos_proj = vec4((tex_coord.s * 2.0) - 1.0, (tex_coord.t * 2.0) - 1.0, depth, 1.0);
	vec4 inv = proj_matrix_inverse * pos_proj;
	
	// Convert position into eye space
	vec3 position = inv.xyz / inv.w;
	
	vec3 pixel_position;
	if (light_position.w == 0.0) {
		pixel_position = vec3(0.0);
	} else {
		pixel_position = position;
	}

	vec3 eye = vec3(0.0);
	
	
	vec4 albedo = texture2D(color_texture, tex_coord);
	vec4 n = texture2D(normal_texture, tex_coord);
	vec4 n2 = texture2D(posxy_texture, tex_coord);

	vec3 normal3 = vec3((DecodeFloatRG8(n.xy) - 0.5) * 2.0, 
						(DecodeFloatRG8(n.zw) - 0.5) * 2.0, 
						(DecodeFloatRG8(n2.xy) - 0.5) * 2.0);
						
	vec4 diffuse = vec4(0.0);
	vec4 specular = vec4(0.0);
	light(pixel_position, light_position.xyz, normal3, eye, spot_direction, diffuse, specular);
	
	albedo = vec4(1.0, 1.0, 1.0, 1.0);
	
	// Apply light	
	gl_FragData[0] = (albedo * diffuse) + specular + (albedo * light_ambient);
}
